   
name: 'Skopeo copy'
description: 'Transfer docker images with Skopeo'
author: 'ixxeL'
inputs:
  src-img:
    description: 'source image name'
    required: true
  dst-img:
    description: 'destination image name'
    required: true
  format:
    description: 'MANIFEST TYPE (oci, v2s1, or v2s2) to use in the destination (default is manifest type of source, with fallbacks)'
    required: false
    default: 'v2s2'
  src-transport:
    description: 'source transport type (containers-storage,dir,docker,docker-archive,docker-daemon,oci,oci-archive,ostree,tarball)'
    required: true
    default: 'docker'
  dst-transport:
    description: 'destination transport type (containers-storage,dir,docker,docker-archive,docker-daemon,oci,oci-archive,ostree,tarball)'
    required: true
    default: 'docker'
  src-creds:
    description: 'source credentials'
    required: false
    default: 'null'
  dst-creds:
    description: 'destination credentials'
    required: false
    default: 'null'
  src-tls:
    description: 'require HTTPS and verify certificates when talking to the container registry or daemon'
    required: false
    default: 'false'
  dst-tls:
    description: 'require HTTPS and verify certificates when talking to the container registry or daemon'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - id: skopeo-copy
      run: |
        echo -e "${BLUE}[ STEP - TRANSFERING IMAGE ] > Transfering docker image with skopeo.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Skopeo version.${BLANK}"
        skopeo --version
        echo -e "${YELLOW}[ EXECUTING ] > Executing ${{ inputs.dst-img }} transfer.${BLANK}"
        if [ "${{ inputs.src-transport }}" = "dir" ]; then
          SRC_DELIMITER=":/"
        elif [ "${{ inputs.src-transport }}" = "docker" ]; then
          SRC_DELIMITER="://"
        else
          SRC_DELIMITER=":"
        fi

        if [ "${{ inputs.dst-transport }}" = "dir" ]; then
          DST_DELIMITER=":/"
        elif [ "${{ inputs.dst-transport }}" = "docker" ]; then
          DST_DELIMITER="://"
        else
          DST_DELIMITER=":"
        fi

        skopeo copy --insecure-policy \
                    --format ${{ inputs.format }} \
                    --src-tls-verify=${{ inputs.src-tls }} \
                    --src-creds=${{ inputs.src-creds }} \
                    --dest-tls-verify=${{ inputs.dst-tls }} \
                    --dest-creds=${{ inputs.dst-creds }} \
                    ${{ inputs.src-transport }}${SRC_DELIMITER}${{ inputs.src-img }} \
                    ${{ inputs.dst-transport }}${DST_DELIMITER}${{ inputs.dst-img }}

        echo -e "${YELLOW}[ EXECUTING ] > Verifying upload of image ${{ inputs.dst-img }}.${BLANK}"
        image=$(echo ${{ inputs.dst-img }} | awk -F ":" '{print $1}')
        tag=$(echo ${{ inputs.dst-img }} | awk -F ":" '{print $2}')
        skopeo_output=$(skopeo list-tags ${{ inputs.dst-transport }}${DST_DELIMITER}${image} --tls-verify=${{ inputs.dst-tls }} --creds=${{ inputs.dst-creds }})
        echo -e "${CYAN}[ INFO ] > Tags list for remote repo.${BLANK}"
        echo "$skopeo_output" | jq
        if [[ $(echo ${skopeo_output} | grep -iE "${tag}") ]]
        then
          echo -e "${GREEN}[ CHECK SUCCESS ] > Docker image ${{ inputs.dst-img }} found in repository.${BLANK}"
        else
          echo -e "${RED}[ STEP FAILED ] > Something went wrong when uploading the docker image ${{ inputs.dst-img }} .${BLANK}"
          exit 1
        fi

      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m